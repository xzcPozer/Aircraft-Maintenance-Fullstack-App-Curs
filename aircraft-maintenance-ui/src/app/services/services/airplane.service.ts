/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AirplaneDto } from '../models/airplane-dto';
import { getAirplaneById } from '../fn/airplane/get-airplane-by-id';
import { GetAirplaneById$Params } from '../fn/airplane/get-airplane-by-id';
import { getAirplaneBySerialNumber } from '../fn/airplane/get-airplane-by-serial-number';
import { GetAirplaneBySerialNumber$Params } from '../fn/airplane/get-airplane-by-serial-number';
import { getAllAirplanes } from '../fn/airplane/get-all-airplanes';
import { GetAllAirplanes$Params } from '../fn/airplane/get-all-airplanes';
import { PageResponseAirplaneDto } from '../models/page-response-airplane-dto';

@Injectable({ providedIn: 'root' })
export class AirplaneService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllAirplanes()` */
  static readonly GetAllAirplanesPath = '/api/v1/airplanes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAirplanes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAirplanes$Response(params?: GetAllAirplanes$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseAirplaneDto>> {
    return getAllAirplanes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAirplanes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAirplanes(params?: GetAllAirplanes$Params, context?: HttpContext): Observable<PageResponseAirplaneDto> {
    return this.getAllAirplanes$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseAirplaneDto>): PageResponseAirplaneDto => r.body)
    );
  }

  /** Path part for operation `getAirplaneById()` */
  static readonly GetAirplaneByIdPath = '/api/v1/airplanes/{airplaneId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAirplaneById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAirplaneById$Response(params: GetAirplaneById$Params, context?: HttpContext): Observable<StrictHttpResponse<AirplaneDto>> {
    return getAirplaneById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAirplaneById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAirplaneById(params: GetAirplaneById$Params, context?: HttpContext): Observable<AirplaneDto> {
    return this.getAirplaneById$Response(params, context).pipe(
      map((r: StrictHttpResponse<AirplaneDto>): AirplaneDto => r.body)
    );
  }

  /** Path part for operation `getAirplaneBySerialNumber()` */
  static readonly GetAirplaneBySerialNumberPath = '/api/v1/airplanes/airplane/by/serial-number';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAirplaneBySerialNumber()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAirplaneBySerialNumber$Response(params: GetAirplaneBySerialNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<AirplaneDto>> {
    return getAirplaneBySerialNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAirplaneBySerialNumber$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAirplaneBySerialNumber(params: GetAirplaneBySerialNumber$Params, context?: HttpContext): Observable<AirplaneDto> {
    return this.getAirplaneBySerialNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<AirplaneDto>): AirplaneDto => r.body)
    );
  }

}
