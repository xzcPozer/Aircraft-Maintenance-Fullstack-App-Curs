/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponse } from '../models/api-response';
import { AuthPerformedWorkDto } from '../models/auth-performed-work-dto';
import { createPerformedWork } from '../fn/performed-work/create-performed-work';
import { CreatePerformedWork$Params } from '../fn/performed-work/create-performed-work';
import { createReportByPeriod } from '../fn/performed-work/create-report-by-period';
import { CreateReportByPeriod$Params } from '../fn/performed-work/create-report-by-period';
import { createReportByPeriodAndSerialNumber } from '../fn/performed-work/create-report-by-period-and-serial-number';
import { CreateReportByPeriodAndSerialNumber$Params } from '../fn/performed-work/create-report-by-period-and-serial-number';
import { getAllPerformedWorksByEngineerAuthIdAndDate } from '../fn/performed-work/get-all-performed-works-by-engineer-auth-id-and-date';
import { GetAllPerformedWorksByEngineerAuthIdAndDate$Params } from '../fn/performed-work/get-all-performed-works-by-engineer-auth-id-and-date';
import { getAllWorks } from '../fn/performed-work/get-all-works';
import { GetAllWorks$Params } from '../fn/performed-work/get-all-works';
import { getAllWorksByEngineerAuthId } from '../fn/performed-work/get-all-works-by-engineer-auth-id';
import { GetAllWorksByEngineerAuthId$Params } from '../fn/performed-work/get-all-works-by-engineer-auth-id';
import { getWorkByIdAndByEngineerAuthId } from '../fn/performed-work/get-work-by-id-and-by-engineer-auth-id';
import { GetWorkByIdAndByEngineerAuthId$Params } from '../fn/performed-work/get-work-by-id-and-by-engineer-auth-id';
import { PageResponseAuthPerformedWorkDto } from '../models/page-response-auth-performed-work-dto';
import { PageResponsePerformedWorkDto } from '../models/page-response-performed-work-dto';
import { updatePerformedWork } from '../fn/performed-work/update-performed-work';
import { UpdatePerformedWork$Params } from '../fn/performed-work/update-performed-work';

@Injectable({ providedIn: 'root' })
export class PerformedWorkService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updatePerformedWork()` */
  static readonly UpdatePerformedWorkPath = '/api/v1/performed-works/my-performed-work/change/{performedWorkId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePerformedWork()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePerformedWork$Response(params: UpdatePerformedWork$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponse>> {
    return updatePerformedWork(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePerformedWork$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePerformedWork(params: UpdatePerformedWork$Params, context?: HttpContext): Observable<ApiResponse> {
    return this.updatePerformedWork$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponse>): ApiResponse => r.body)
    );
  }

  /** Path part for operation `createReportByPeriod()` */
  static readonly CreateReportByPeriodPath = '/api/v1/performed-works/create-report/by/period';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createReportByPeriod()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReportByPeriod$Response(params: CreateReportByPeriod$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return createReportByPeriod(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createReportByPeriod$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReportByPeriod(params: CreateReportByPeriod$Params, context?: HttpContext): Observable<Blob> {
    return this.createReportByPeriod$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `createReportByPeriodAndSerialNumber()` */
  static readonly CreateReportByPeriodAndSerialNumberPath = '/api/v1/performed-works/create-report/by/period-and-serial-number';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createReportByPeriodAndSerialNumber()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReportByPeriodAndSerialNumber$Response(params: CreateReportByPeriodAndSerialNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return createReportByPeriodAndSerialNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createReportByPeriodAndSerialNumber$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReportByPeriodAndSerialNumber(params: CreateReportByPeriodAndSerialNumber$Params, context?: HttpContext): Observable<Blob> {
    return this.createReportByPeriodAndSerialNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `createPerformedWork()` */
  static readonly CreatePerformedWorkPath = '/api/v1/performed-works/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPerformedWork()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPerformedWork$Response(params: CreatePerformedWork$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponse>> {
    return createPerformedWork(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPerformedWork$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPerformedWork(params: CreatePerformedWork$Params, context?: HttpContext): Observable<ApiResponse> {
    return this.createPerformedWork$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponse>): ApiResponse => r.body)
    );
  }

  /** Path part for operation `getAllWorks()` */
  static readonly GetAllWorksPath = '/api/v1/performed-works';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllWorks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorks$Response(params?: GetAllWorks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePerformedWorkDto>> {
    return getAllWorks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllWorks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorks(params?: GetAllWorks$Params, context?: HttpContext): Observable<PageResponsePerformedWorkDto> {
    return this.getAllWorks$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePerformedWorkDto>): PageResponsePerformedWorkDto => r.body)
    );
  }

  /** Path part for operation `getAllWorksByEngineerAuthId()` */
  static readonly GetAllWorksByEngineerAuthIdPath = '/api/v1/performed-works/my-performed-work';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllWorksByEngineerAuthId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorksByEngineerAuthId$Response(params?: GetAllWorksByEngineerAuthId$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseAuthPerformedWorkDto>> {
    return getAllWorksByEngineerAuthId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllWorksByEngineerAuthId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorksByEngineerAuthId(params?: GetAllWorksByEngineerAuthId$Params, context?: HttpContext): Observable<PageResponseAuthPerformedWorkDto> {
    return this.getAllWorksByEngineerAuthId$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseAuthPerformedWorkDto>): PageResponseAuthPerformedWorkDto => r.body)
    );
  }

  /** Path part for operation `getWorkByIdAndByEngineerAuthId()` */
  static readonly GetWorkByIdAndByEngineerAuthIdPath = '/api/v1/performed-works/my-performed-work/{performedWorkId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWorkByIdAndByEngineerAuthId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkByIdAndByEngineerAuthId$Response(params: GetWorkByIdAndByEngineerAuthId$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthPerformedWorkDto>> {
    return getWorkByIdAndByEngineerAuthId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWorkByIdAndByEngineerAuthId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkByIdAndByEngineerAuthId(params: GetWorkByIdAndByEngineerAuthId$Params, context?: HttpContext): Observable<AuthPerformedWorkDto> {
    return this.getWorkByIdAndByEngineerAuthId$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthPerformedWorkDto>): AuthPerformedWorkDto => r.body)
    );
  }

  /** Path part for operation `getAllPerformedWorksByEngineerAuthIdAndDate()` */
  static readonly GetAllPerformedWorksByEngineerAuthIdAndDatePath = '/api/v1/performed-works/my-performed-work/by/period';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPerformedWorksByEngineerAuthIdAndDate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPerformedWorksByEngineerAuthIdAndDate$Response(params: GetAllPerformedWorksByEngineerAuthIdAndDate$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseAuthPerformedWorkDto>> {
    return getAllPerformedWorksByEngineerAuthIdAndDate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPerformedWorksByEngineerAuthIdAndDate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPerformedWorksByEngineerAuthIdAndDate(params: GetAllPerformedWorksByEngineerAuthIdAndDate$Params, context?: HttpContext): Observable<PageResponseAuthPerformedWorkDto> {
    return this.getAllPerformedWorksByEngineerAuthIdAndDate$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseAuthPerformedWorkDto>): PageResponseAuthPerformedWorkDto => r.body)
    );
  }

}
