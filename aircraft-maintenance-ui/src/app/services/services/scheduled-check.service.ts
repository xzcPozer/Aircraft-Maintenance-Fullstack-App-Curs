/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addScheduledCheck } from '../fn/scheduled-check/add-scheduled-check';
import { AddScheduledCheck$Params } from '../fn/scheduled-check/add-scheduled-check';
import { ApiResponse } from '../models/api-response';
import { getAllScheduledCheckByEngineerId } from '../fn/scheduled-check/get-all-scheduled-check-by-engineer-id';
import { GetAllScheduledCheckByEngineerId$Params } from '../fn/scheduled-check/get-all-scheduled-check-by-engineer-id';
import { getAllScheduledWorkByDate } from '../fn/scheduled-check/get-all-scheduled-work-by-date';
import { GetAllScheduledWorkByDate$Params } from '../fn/scheduled-check/get-all-scheduled-work-by-date';
import { getAllScheduledWorks } from '../fn/scheduled-check/get-all-scheduled-works';
import { GetAllScheduledWorks$Params } from '../fn/scheduled-check/get-all-scheduled-works';
import { getScheduledCheckById } from '../fn/scheduled-check/get-scheduled-check-by-id';
import { GetScheduledCheckById$Params } from '../fn/scheduled-check/get-scheduled-check-by-id';
import { PageResponseScheduledCheckDto } from '../models/page-response-scheduled-check-dto';
import { ScheduledCheckDto } from '../models/scheduled-check-dto';
import { updateScheduledCheck } from '../fn/scheduled-check/update-scheduled-check';
import { UpdateScheduledCheck$Params } from '../fn/scheduled-check/update-scheduled-check';

@Injectable({ providedIn: 'root' })
export class ScheduledCheckService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateScheduledCheck()` */
  static readonly UpdateScheduledCheckPath = '/api/v1/scheduled-checks/scheduled-check/change/{scheduledCheckId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateScheduledCheck()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateScheduledCheck$Response(params: UpdateScheduledCheck$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponse>> {
    return updateScheduledCheck(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateScheduledCheck$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateScheduledCheck(params: UpdateScheduledCheck$Params, context?: HttpContext): Observable<ApiResponse> {
    return this.updateScheduledCheck$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponse>): ApiResponse => r.body)
    );
  }

  /** Path part for operation `addScheduledCheck()` */
  static readonly AddScheduledCheckPath = '/api/v1/scheduled-checks/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addScheduledCheck()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addScheduledCheck$Response(params: AddScheduledCheck$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponse>> {
    return addScheduledCheck(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addScheduledCheck$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addScheduledCheck(params: AddScheduledCheck$Params, context?: HttpContext): Observable<ApiResponse> {
    return this.addScheduledCheck$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponse>): ApiResponse => r.body)
    );
  }

  /** Path part for operation `getScheduledCheckById()` */
  static readonly GetScheduledCheckByIdPath = '/api/v1/scheduled-checks/scheduled-check/{scheduledCheckId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getScheduledCheckById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getScheduledCheckById$Response(params: GetScheduledCheckById$Params, context?: HttpContext): Observable<StrictHttpResponse<ScheduledCheckDto>> {
    return getScheduledCheckById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getScheduledCheckById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getScheduledCheckById(params: GetScheduledCheckById$Params, context?: HttpContext): Observable<ScheduledCheckDto> {
    return this.getScheduledCheckById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ScheduledCheckDto>): ScheduledCheckDto => r.body)
    );
  }

  /** Path part for operation `getAllScheduledCheckByEngineerId()` */
  static readonly GetAllScheduledCheckByEngineerIdPath = '/api/v1/scheduled-checks/my-scheduled-check';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllScheduledCheckByEngineerId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllScheduledCheckByEngineerId$Response(params?: GetAllScheduledCheckByEngineerId$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseScheduledCheckDto>> {
    return getAllScheduledCheckByEngineerId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllScheduledCheckByEngineerId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllScheduledCheckByEngineerId(params?: GetAllScheduledCheckByEngineerId$Params, context?: HttpContext): Observable<PageResponseScheduledCheckDto> {
    return this.getAllScheduledCheckByEngineerId$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseScheduledCheckDto>): PageResponseScheduledCheckDto => r.body)
    );
  }

  /** Path part for operation `getAllScheduledWorks()` */
  static readonly GetAllScheduledWorksPath = '/api/v1/scheduled-checks/all-scheduled-check';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllScheduledWorks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllScheduledWorks$Response(params?: GetAllScheduledWorks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseScheduledCheckDto>> {
    return getAllScheduledWorks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllScheduledWorks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllScheduledWorks(params?: GetAllScheduledWorks$Params, context?: HttpContext): Observable<PageResponseScheduledCheckDto> {
    return this.getAllScheduledWorks$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseScheduledCheckDto>): PageResponseScheduledCheckDto => r.body)
    );
  }

  /** Path part for operation `getAllScheduledWorkByDate()` */
  static readonly GetAllScheduledWorkByDatePath = '/api/v1/scheduled-checks/all-scheduled-check/by/date';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllScheduledWorkByDate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllScheduledWorkByDate$Response(params: GetAllScheduledWorkByDate$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseScheduledCheckDto>> {
    return getAllScheduledWorkByDate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllScheduledWorkByDate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllScheduledWorkByDate(params: GetAllScheduledWorkByDate$Params, context?: HttpContext): Observable<PageResponseScheduledCheckDto> {
    return this.getAllScheduledWorkByDate$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseScheduledCheckDto>): PageResponseScheduledCheckDto => r.body)
    );
  }

}
